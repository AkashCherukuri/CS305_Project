#include "ooo_cpu.h"
#include <errno.h>
#include <fcntl.h>
#include <fstream>
#include <list>
#include <stdio.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/types.h>

void O3_CPU::l1i_prefetcher_initialize() {
  // read conditional branches into conditionals matrix

  std::string file_to_read = "./conditional/" + BTB.condfile;
  const char *cstr = file_to_read.c_str();
  int fp = open(cstr, O_RDWR);

  if (!fp) {
    fprintf(stderr, "error: open %s :: %s\n\n", cstr, strerror(errno));
    assert(0);
  }

  Conds e;
  uint64_t set;
  int rw = 0;
  while ((rw = read(fp, &e, sizeof(e)))) {
    assert(rw == sizeof(e));
    set = ((e.ip) >> LOG2_BLOCK_SIZE);
    set = set & ((1 << lg2(L1I_SET)) - 1);

    BTB.conditionals[set].push_back(e);
  }
  close(fp);

  /*	for(int i = 0; i< L1I_SET; i++)
          {
                  cout << i << " " << BTB.conditionals[i].size() << endl;
          }
  */
}

void O3_CPU::l1i_prefetcher_branch_operate(uint64_t ip, uint8_t branch_type,
                                           uint64_t branch_target) {
  /*
  The RAS may not be up to date here, as that happens when the instruction
  retires. Figure out a workaround.
  */

  if (branch_target == 0)
    return;

  // update SHOTGUN metadata and fill BTB accordingly
  if (branch_type == BRANCH_DIRECT_JUMP || branch_type == BRANCH_INDIRECT) {
    // update shotgun metadata, add to ubtb
    BTB.curr_bb_address = ip;
    BTB.curr_bb_type = IS_UBTB;
    BTB.active_footprint = CALLER_FOOTPRINT;

    int set = BTB.get_set(ip, IS_UBTB);
    BTB.active_ubtb_set = set;

    int way = BTB.fill_btb(ip, branch_target, IS_UBTB, UNCONDITIONAL);
    BTB.active_ubtb_way = way;
  } else if (branch_type == BRANCH_DIRECT_CALL ||
             branch_type == BRANCH_INDIRECT_CALL) {
    // update ras, shotgun metadata, add to ubtb
    // int ins_size = 1 << LOG2_INSTR_SIZE;
    // BTB.ras.push( ip + ins_size, ip, branch_target);

    BTB.curr_bb_address = ip;
    BTB.curr_bb_type = IS_UBTB;
    BTB.active_footprint = CALLER_FOOTPRINT;

    int set = BTB.get_set(ip, IS_UBTB);
    BTB.active_ubtb_set = set;

    int way = BTB.fill_btb(ip, branch_target, IS_UBTB, CALL);
    BTB.active_ubtb_way = way;
  } else if (branch_type == BRANCH_CONDITIONAL) {
    // the target being used is the predicted one.
    int set = BTB.get_set(ip, IS_CBTB);
    int way = BTB.get_way(ip, set, IS_CBTB);

    if (way == CBTB_WAY)
      BTB.fill_btb(ip, branch_target, IS_CBTB, 0);
  } else if (branch_type == BRANCH_RETURN) {
    // update ras, shotgun metadata, add to rib and ubtb.
    if (BTB.ras.head < 0)
      return;

    int ins_size = 1 << LOG2_INSTR_SIZE;
    uint64_t trigger = BTB.ras.caller_trigger[BTB.ras.head];
    uint64_t ret = BTB.ras.return_address[BTB.ras.head];
    uint64_t target_addr = BTB.ras.target_address[BTB.ras.head];

    // BTB.ras.pop();

    BTB.curr_bb_address = ip;
    BTB.curr_bb_type = IS_RIB;
    BTB.active_footprint = RETURN_FOOTPRINT;

    int set = BTB.get_set(trigger, IS_UBTB);
    BTB.active_ubtb_set = set;

    int way = BTB.fill_btb(trigger, target_addr, IS_UBTB, CALL);
    BTB.active_ubtb_way = way;

    // add to RIB
    way = BTB.fill_btb(ip, 0, IS_RIB, 0);
  }

  // try and find the entry in BTB
  int set, way;
  uint64_t target;

  set = BTB.get_set(ip, IS_UBTB);
  way = BTB.get_way(ip, set, IS_UBTB);

  if (way < UBTB_WAY) {
    // hit in UBTB. Prefetch the required lines.
    target = (BTB.ubtb[set][way].target.to_ulong() << LOG2_INSTR_SIZE);
    prefetch_code_line(target);

    for (int i = SPACIAL_FOOTPRINT_PREV; i < SPACIAL_FOOTPRINT; ++i) {
      if (BTB.ubtb[set][way].call_footprint[i] == 1) {
        prefetch_code_line(
            ((target >> LOG2_BLOCK_SIZE) + (i + 1 - SPACIAL_FOOTPRINT_PREV))
            << LOG2_BLOCK_SIZE);
      }
    }

    for (int i = SPACIAL_FOOTPRINT_PREV - 1; i >= 0; --i) {
      if (BTB.ubtb[set][way].call_footprint[i] == 1) {
        prefetch_code_line(
            ((target >> LOG2_BLOCK_SIZE) - (SPACIAL_FOOTPRINT_PREV - i))
            << LOG2_BLOCK_SIZE);
      }
    }

    return;
  }

  set = BTB.get_set(ip, IS_RIB);
  way = BTB.get_way(ip, set, IS_RIB);

  if (way < RIB_WAY) {
    if (BTB.ras.head < 0)
      return;

    uint64_t trigger = BTB.ras.caller_trigger[BTB.ras.head];
    uint64_t ret = BTB.ras.return_address[BTB.ras.head];

    prefetch_code_line(trigger);

    set = BTB.get_set(trigger, IS_UBTB);
    way = BTB.get_way(trigger, set, IS_UBTB);

    if (way >= UBTB_WAY)
      return;

    for (int i = SPACIAL_FOOTPRINT_PREV; i < SPACIAL_FOOTPRINT; ++i) {
      if (BTB.ubtb[set][way].return_footprint[i] == 1) {
        prefetch_code_line(
            ((trigger >> LOG2_BLOCK_SIZE) + (i + 1 - SPACIAL_FOOTPRINT_PREV))
            << LOG2_BLOCK_SIZE);
      }
    }

    for (int i = SPACIAL_FOOTPRINT_PREV - 1; i >= 0; --i) {
      if (BTB.ubtb[set][way].return_footprint[i] == 1) {
        prefetch_code_line(
            ((trigger >> LOG2_BLOCK_SIZE) - (SPACIAL_FOOTPRINT_PREV - i))
            << LOG2_BLOCK_SIZE);
      }
    }

    return;
  }

  set = BTB.get_set(ip, IS_CBTB);
  way = BTB.get_way(ip, set, IS_CBTB);

  if (way < CBTB_WAY) {
    // hit in CBTB. Prefetch the required line.
    target = (BTB.cbtb[set][way].target.to_ulong() << LOG2_INSTR_SIZE);

    if (target >> LOG2_BLOCK_SIZE != ip >> LOG2_BLOCK_SIZE)
      prefetch_code_line(target);

    return;
  }

  // search in PREFETCH BUFFER
  for (uint32_t i = 0; i < PREFETCH_BUFFER_LEN; ++i) {
    if (BTB.pbuf[i].ip == ip) {
      BTB.fill_btb(BTB.pbuf[i].ip, BTB.pbuf[i].target, BTB.pbuf[i].btb_type,
                   BTB.pbuf[i].uncond_branch_type);

      if (BTB.pbuf[i].btb_type == IS_UBTB || BTB.pbuf[i].btb_type == IS_CBTB)
        prefetch_code_line(BTB.pbuf[i].target);

      // in case of return, will RAS be in phase?

      BTB.pbuf[i].valid = false;
    }
  }
}

void O3_CPU::l1i_prefetcher_cache_operate(uint64_t v_addr, uint8_t cache_hit,
                                          uint8_t prefetch_hit) {
  // record cache accesses in footprints
  uint64_t accessed_blk = v_addr >> LOG2_BLOCK_SIZE;
  int ubtb_set = BTB.active_ubtb_set;
  int ubtb_way = BTB.active_ubtb_way;
  int index;
  uint64_t trigger_blk;

  if (BTB.active_footprint == CALLER_FOOTPRINT) {
    trigger_blk =
        (BTB.ubtb[ubtb_set][ubtb_way].target.to_ulong() << LOG2_INSTR_SIZE) >>
        LOG2_BLOCK_SIZE;

    if (accessed_blk < trigger_blk &&
        (trigger_blk - accessed_blk) <= SPACIAL_FOOTPRINT_PREV) {
      index = SPACIAL_FOOTPRINT_PREV - (trigger_blk - accessed_blk);
    } else if (trigger_blk < accessed_blk &&
               (accessed_blk - trigger_blk) <= SPACIAL_FOOTPRINT_FWD) {
      index = (SPACIAL_FOOTPRINT_PREV - 1) + (accessed_blk - trigger_blk);
    }

    BTB.ubtb[ubtb_set][ubtb_way].call_footprint[index] = 1;

  } else {
    trigger_blk =
        (BTB.ubtb[ubtb_set][ubtb_way].tag.to_ulong() << LOG2_UBTB_SET);
    trigger_blk =
        ((trigger_blk | ubtb_set) << LOG2_INSTR_SIZE) >> LOG2_BLOCK_SIZE;

    if (accessed_blk < trigger_blk &&
        (trigger_blk - accessed_blk) <= SPACIAL_FOOTPRINT_PREV) {
      index = SPACIAL_FOOTPRINT_PREV - (trigger_blk - accessed_blk);
    } else if (trigger_blk < accessed_blk &&
               (accessed_blk - trigger_blk) <= SPACIAL_FOOTPRINT_FWD) {
      index = (SPACIAL_FOOTPRINT_PREV - 1) + (accessed_blk - trigger_blk);
    }

    BTB.ubtb[ubtb_set][ubtb_way].return_footprint[index] = 1;
  }
}

void O3_CPU::l1i_prefetcher_cycle_operate() {}

void O3_CPU::l1i_prefetcher_cache_fill(uint64_t v_addr, uint32_t set,
                                       uint32_t way, uint8_t prefetch,
                                       uint64_t evicted_v_addr) {}

void O3_CPU::l1i_prefetcher_final_stats() {}
