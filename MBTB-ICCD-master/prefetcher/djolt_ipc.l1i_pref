#include "cache.h"
#include "ooo_cpu.h"

#include <array>
#include <fstream>
#include <memory>
#include <unordered_map>
#include <unordered_set>

#include <algorithm>
#include <array>
#include <bitset>
#include <deque>
#include <memory>
#include <utility>

namespace { // anonymous

// ============================================================
//  D-JOLT parameters.
// ============================================================
static constexpr size_t UpperBitPtrBits =
    5; // This determines that the number of upper bit variations that D-JOLT
       // can handle.
static constexpr size_t UpperBitMask =
    0xffffffffff000000; // This defines where upper bit is.

static constexpr size_t SignatureBits =
    23; // Note: if you change this, you may need to re-tune the hash function
        // in siggens.

#define LongRangePrefetcherSiggen Siggen_FifoRetCnt<7>
static constexpr size_t LongRangePrefetcher_N_Sets =
    2048; // Note: if the number of sets is a non-power-of-two number, you may
          // need to re-tune the hash function in siggens.
static constexpr size_t LongRangePrefetcher_N_Ways = 4;
static constexpr size_t LongRangePrefetcher_N_Vectors = 2;
static constexpr size_t LongRangePrefetcher_VectorSize = 8;
static constexpr size_t LongRangePrefetcher_TagBits = 12;

#define ShortRangePrefetcherSiggen Siggen_FifoRetCnt<4>
static constexpr size_t ShortRangePrefetcher_N_Sets = 1024;
static constexpr size_t ShortRangePrefetcher_N_Ways = 4;
static constexpr size_t ShortRangePrefetcher_N_Vectors = 2;
static constexpr size_t ShortRangePrefetcher_VectorSize = 8;
static constexpr size_t ShortRangePrefetcher_TagBits = 13;

static constexpr size_t ExtraMissTable_N_Sets = 256;
static constexpr size_t ExtraMissTable_N_Ways = 4;
static constexpr size_t ExtraMissTable_N_Vectors = 2;
static constexpr size_t ExtraMissTable_VectorSize = 8;
static constexpr size_t ExtraMissTable_TagBits = 15;

// ============================================================

// This is a compressed expression of upper bit.
struct UpperBitPtr {
  size_t ptr;
  bool operator==(const UpperBitPtr &rhs) const noexcept {
    return ptr == rhs.ptr;
  }
  bool operator!=(const UpperBitPtr &rhs) const noexcept {
    return ptr != rhs.ptr;
  }
};

// This is a compressed representation of line address.
struct CompressedLineAddress {
  UpperBitPtr upper_part;
  uint64_t lower_part;
  bool isValid() const noexcept { return upper_part.ptr != 0; }
};

// This table records the correspondence between the compressed expression and
// the original expression.
class UpperBitTable {
  struct Entry {
    bool valid;
    uint64_t upper_bits;
  };
  std::array<Entry, (1ull << UpperBitPtrBits) - 1> table = {};

public:
  std::pair<bool, CompressedLineAddress> compress(uint64_t full_address) {
    const uint64_t upper_bits = full_address & UpperBitMask;
    const uint64_t lower_bits =
        (full_address & ~UpperBitMask) >> LOG2_BLOCK_SIZE;

    const auto exists_pos = std::find_if(
        table.begin(), table.end(), [upper_bits](const Entry &e) noexcept {
          return e.valid && upper_bits == e.upper_bits;
        });
    const bool entry_exists = exists_pos != table.end();

    if (entry_exists) {
      return {
          true,
          {static_cast<size_t>(exists_pos - table.begin()) + 1, lower_bits}};
    } else {
      const auto invalid_pos =
          std::find_if(table.begin(), table.end(), [](const Entry &e) noexcept {
            return !e.valid;
          });
      const bool invalid_entry_found = invalid_pos != table.end();

      if (invalid_entry_found) {
        (*invalid_pos) = {true, upper_bits};
        return {
            true,
            {static_cast<size_t>(invalid_pos - table.begin()) + 1, lower_bits}};
      } else {
        return {false, {}};
      }
    }
  }

  uint64_t decompress(CompressedLineAddress cla) const {
    return table.at(cla.upper_part.ptr - 1).upper_bits +
           (cla.lower_part << LOG2_BLOCK_SIZE);
  }
};

// utility functions

std::vector<size_t> make_initialized_lru_order(size_t size) {
  std::vector<size_t> ret(size);
  std::iota(ret.begin(), ret.end(), 0);
  return ret;
}

template <size_t N> std::array<size_t, N> make_initialized_lru_order() {
  std::array<size_t, N> ret;
  std::iota(ret.begin(), ret.end(), 0);
  return ret;
}

template <class T>
void update_lru_order(T &lru_order, size_t touch_pos) noexcept {
  assert(touch_pos < lru_order.size());
  for (auto &e : lru_order) {
    if (e < lru_order.at(touch_pos)) {
      ++e;
    }
  }
  lru_order.at(touch_pos) = 0;
}

template <size_t HistLen> class Siggen_FifoRetCnt {
  std::array<uint32_t, HistLen> ghist = {};
  size_t head = 0;
  size_t return_count = 0;

  uint32_t makeSig() const noexcept {
    uint32_t sig = 0;
    for (size_t i = head; i < head + HistLen; ++i) {
      const uint32_t pc = ghist.at(i % HistLen);
      sig = (sig << (SignatureBits - 5)) | (sig >> 5);
      sig ^= pc ^ pc >> 2; // work well on both A64/x86
      sig &= ((1ull << SignatureBits) - 1);
    }
    sig ^= return_count * 0xabcd;
    return sig & ((1ull << SignatureBits) - 1);
  }

public:
  uint32_t onReturnInstruction(uint64_t, uint64_t) {
    ++return_count;
    return makeSig();
  }
  uint32_t onCallInstruction(uint64_t ip, uint64_t) {
    return_count = 0;
    ghist.at(head) = ip;
    head = (head + 1) % HistLen;
    return makeSig();
  }
};

template <size_t VectorSize> class MissInfo {
  CompressedLineAddress base_address = {};
  std::array<bool, VectorSize> bit_vector = {};

public:
  bool add(CompressedLineAddress address) noexcept {
    if (base_address.isValid()) {
      if (base_address.upper_part.ptr != address.upper_part.ptr) {
        return false;
      }
      const int64_t diff = address.lower_part - base_address.lower_part;
      if (diff < 0) {
        return false;
      } else if (diff == 0) {
        return true;
      } else if (static_cast<size_t>(diff - 1) < bit_vector.size()) {
        bit_vector.at(diff - 1) = true;
        return true;
      } else {
        return false;
      }
    } else {
      base_address = address;
      return true;
    }
  }
  bool isValid() const noexcept { return base_address.isValid(); }
  std::vector<CompressedLineAddress> getAddresses() const {
    assert(isValid());
    std::vector<CompressedLineAddress> ret;
    ret.push_back(base_address);
    for (size_t i = 0; i < bit_vector.size(); ++i) {
      if (bit_vector.at(i)) {
        CompressedLineAddress tmp = base_address;
        tmp.lower_part += (i + 1);
        ret.push_back(tmp);
      }
    }
    return ret;
  }
};

template <size_t N_Vectors, size_t VectorSize> class MissTableEntry {
  static_assert(N_Vectors < VectorSize, "this is strange...");
  std::array<MissInfo<VectorSize>, N_Vectors> elems = {};

public:
  bool insert_but_do_not_evict(CompressedLineAddress address) {
    for (size_t i = 0; i < N_Vectors; ++i) {
      const bool success = elems.at(i).add(address);
      if (success) {
        return true;
      }
    }
    return false;
  }

  std::vector<MissInfo<VectorSize>> getValidEntries() const {
    std::vector<MissInfo<VectorSize>> ret;
    for (const auto &e : elems) {
      if (e.isValid()) {
        ret.push_back(e);
      }
    }
    return ret;
  }
};

template <class T, class U, class Hasher> class FullyAssociativeLRUTable {
  struct Entry {
    size_t tag;
    U value;
    bool valid;
    Entry() : tag(0), value(), valid(false) {}
  };

  size_t N_Ways;
  Hasher hasher;
  std::vector<Entry> table;
  std::vector<size_t> lru_order;

  size_t find_index_of(const T &key) const {
    const size_t tag = hasher(key);
    return std::find_if(table.begin(), table.end(),
                        [tag](const Entry &entry) noexcept {
                          return entry.valid && entry.tag == tag;
                        }) -
           table.begin();
  }

public:
  FullyAssociativeLRUTable() = default;
  FullyAssociativeLRUTable(size_t N_Ways, Hasher hasher)
      : N_Ways(N_Ways), hasher(hasher), table(N_Ways),
        lru_order(make_initialized_lru_order(N_Ways)) {}

  const U &operator[](const T &key) const {
    assert(contains(key));
    return table.at(find_index_of(key)).value;
  }
  U &operator[](const T &key) {
    assert(contains(key));
    return table.at(find_index_of(key)).value;
  }

  void touch(const T &key) {
    assert(contains(key));
    update_lru_order(lru_order, find_index_of(key));
  }

  void insert(const T &key, const U &elem) {
    if (contains(key)) {
      const size_t index = find_index_of(key);
      table.at(index).value = elem;
      touch(key);
    } else {
      const size_t victim_index =
          std::max_element(lru_order.begin(), lru_order.end()) -
          lru_order.begin();
      table.at(victim_index).tag = hasher(key);
      table.at(victim_index).value = elem;
      table.at(victim_index).valid = true;
      touch(key);
    }
  }

  bool contains(const T &key) const { return find_index_of(key) != N_Ways; }
};

template <class T> class FullyAssociativeLRUSet {
  size_t N_Ways;
  std::vector<T> table;
  std::vector<size_t> lru_order;

public:
  FullyAssociativeLRUSet() = default;
  FullyAssociativeLRUSet(size_t N_Ways)
      : N_Ways(N_Ways), table(N_Ways),
        lru_order(make_initialized_lru_order(N_Ways)) {}

  T &at(size_t i) { return table.at(i); }
  const T &at(size_t i) const { return table.at(i); }
  void touch(size_t i) { update_lru_order(lru_order, i); }
  size_t find_lru_index() {
    return static_cast<size_t>(
        std::max_element(lru_order.begin(), lru_order.end()) -
        lru_order.begin());
  }
};

template <class T, class U, class Hasher> class SetAssociativeLRUTable {
  struct HasherForIndex {
    Hasher hasher;
    size_t N_Sets;
    size_t operator()(const T &key) const { return hasher(key) % N_Sets; }
    HasherForIndex() = default;
    HasherForIndex(Hasher hasher, size_t N_Sets)
        : hasher(hasher), N_Sets(N_Sets) {}
  };

  struct HasherForTag {
    Hasher hasher;
    size_t N_Sets;
    size_t operator()(const T &key) const { return hasher(key) / N_Sets; }
    HasherForTag() = default;
    HasherForTag(Hasher hasher, size_t N_Sets)
        : hasher(hasher), N_Sets(N_Sets) {}
  };

  using Entry = FullyAssociativeLRUTable<T, U, HasherForTag>;

  HasherForIndex hasher_for_index;
  std::vector<Entry> table;

public:
  SetAssociativeLRUTable() = default;
  SetAssociativeLRUTable(size_t N_Sets, size_t N_Ways, Hasher hasher)
      : hasher_for_index(hasher, N_Sets),
        table(N_Sets, Entry(N_Ways, HasherForTag(hasher, N_Sets))) {

    if (N_Ways > N_Sets) {
      std::cout << "N_Ways=" << N_Ways << ", N_Sets=" << N_Sets
                << ", this is strange..." << std::endl;
      assert(false);
    }
  }

  const U &operator[](const T &key) const {
    return table.at(hasher_for_index(key))[key];
  }
  U &operator[](const T &key) { return table.at(hasher_for_index(key))[key]; }
  void touch(const T &key) { table.at(hasher_for_index(key)).touch(key); }
  void insert(const T &key, const U &elem) {
    table.at(hasher_for_index(key)).insert(key, elem);
  }
  bool contains(const T &key) const {
    return table.at(hasher_for_index(key)).contains(key);
  }
};

class WindowBasedStreamPrefetcher {
  static constexpr size_t TrainingThreshold = 3;
  static constexpr size_t WindowSize = 2;
  static constexpr size_t Distance = 2;
  static constexpr size_t Degree = 2;
  static constexpr size_t TrainingTableSize = 16;
  static constexpr size_t MonitoringTableSize = 16;

  struct TrainingStreamEntry {
    bool valid;
    uint64_t start_line_address;
    size_t count;
  };

  struct MonitoringStreamEntry {
    bool valid;
    uint64_t start_line_address;
  };

  FullyAssociativeLRUSet<TrainingStreamEntry> training_table;
  FullyAssociativeLRUSet<MonitoringStreamEntry> monitoring_table;

  // Is line_address in [start_line_adress, start_line_adress + range_size)?
  static bool is_in_range(uint64_t line_address, uint64_t start_line_address,
                          size_t range_size) noexcept {
    return start_line_address <= line_address &&
           line_address < start_line_address + range_size;
  }

  void allocate_training_stream(uint64_t line_address) {
    const size_t lru_index = training_table.find_lru_index();
    training_table.at(lru_index) = TrainingStreamEntry{
        /* valid = */ true, /* start_line_address = */ line_address,
        /* count = */ 0};
    training_table.touch(lru_index);
  }

  bool update_training_stream_and_prefetch(uint64_t line_address,
                                           O3_CPU *pO3_CPU) {
    for (size_t i = 0; i < TrainingTableSize; ++i) {
      TrainingStreamEntry &stream = training_table.at(i);
      if (!stream.valid) {
        continue;
      }

      if (!is_in_range(line_address, stream.start_line_address, WindowSize)) {
        continue;
      }

      ++stream.count;

      if (stream.count >= TrainingThreshold) {
        prefetch_initial_stream(line_address, stream, pO3_CPU);
        allocate_monitoring_stream(MonitoringStreamEntry{
            /* valid = */ true,
            /* start_line_address = */ line_address}); // line_address,
                                                       // line_address+1, ...
                                                       // will be prefetched.
        stream.valid = false;
      } else {
        training_table.touch(i);
      }
      return true;
    }

    return false;
  }

  void allocate_monitoring_stream(MonitoringStreamEntry entry) {
    const size_t lru_index = monitoring_table.find_lru_index();
    monitoring_table.at(lru_index) = std::move(entry);
    monitoring_table.touch(lru_index);
  }

  bool update_monitoring_stream_and_prefetch(uint64_t line_address,
                                             O3_CPU *pO3_CPU) {
    for (size_t i = 0; i < MonitoringTableSize; ++i) {
      MonitoringStreamEntry &stream = monitoring_table.at(i);
      if (!stream.valid) {
        continue;
      }

      // Check a missed address is in a prefetch window.
      if (!is_in_range(line_address, stream.start_line_address, Distance)) {
        continue;
      }

      // Update, issue prefetch, and touch a entry
      for (size_t j = 0; j < Degree; ++j) {
        const uint64_t pf_addr = (stream.start_line_address + Distance)
                                 << LOG2_BLOCK_SIZE;

        pO3_CPU->prefetch_code_line(pf_addr);

        ++stream.start_line_address;
      }
      monitoring_table.touch(i);
      return true;
    }
    return false;
  }

  void prefetch_initial_stream(uint64_t line_address,
                               const TrainingStreamEntry &stream,
                               O3_CPU *pO3_CPU) {
    // i == 0 is not needed since it is the same line as the demand access.
    for (size_t i = 1; i < Distance; ++i) {
      const uint64_t pf_addr = (line_address + i) << LOG2_BLOCK_SIZE;
      pO3_CPU->prefetch_code_line(pf_addr);
    }
  }

public:
  WindowBasedStreamPrefetcher()
      : training_table(TrainingTableSize),
        monitoring_table(MonitoringTableSize) {}
  void cache_operate(uint64_t address, uint8_t cache_hit, uint8_t prefetch_hit,
                     O3_CPU *pO3_CPU) {
    const bool virtual_miss = cache_hit == 0 || prefetch_hit == 1;
    const uint64_t line_address = address >> LOG2_BLOCK_SIZE;

    const bool already_monitored_stream =
        update_monitoring_stream_and_prefetch(line_address, pO3_CPU);

    if (virtual_miss) {
      const bool already_training_stream =
          update_training_stream_and_prefetch(line_address, pO3_CPU);

      if (!already_monitored_stream && !already_training_stream) {
        allocate_training_stream(line_address);
      }
    }
  }
};

class D_JOLT_PREFETCHER {
  O3_CPU *pO3_CPU;
  struct SigHasher {
    size_t operator()(const uint32_t &x) const noexcept { return x; }
  };

  static constexpr size_t N_Prefetchers = 2;

  std::array<size_t, N_Prefetchers> SigDistance = {
      {4, 15}}; // Note: distance == 0 is invalid (due to parameter restriction)

  std::array<size_t, N_Prefetchers> MissTable1_N_Sets = {
      {ShortRangePrefetcher_N_Sets, LongRangePrefetcher_N_Sets}};
  std::array<size_t, N_Prefetchers> MissTable1_N_Ways = {
      {ShortRangePrefetcher_N_Ways, LongRangePrefetcher_N_Ways}};

  ShortRangePrefetcherSiggen siggen_1 = {};
  LongRangePrefetcherSiggen siggen_2 = {};

  static_assert(ShortRangePrefetcher_N_Vectors == LongRangePrefetcher_N_Vectors,
                "TODO");
  static_assert(ShortRangePrefetcher_VectorSize ==
                    LongRangePrefetcher_VectorSize,
                "TODO");

  std::array<
      SetAssociativeLRUTable<uint32_t,
                             MissTableEntry<ShortRangePrefetcher_N_Vectors,
                                            ShortRangePrefetcher_VectorSize>,
                             SigHasher>,
      N_Prefetchers>
      miss_table1;
  SetAssociativeLRUTable<
      uint32_t,
      MissTableEntry<ExtraMissTable_N_Vectors, ExtraMissTable_VectorSize>,
      SigHasher>
      miss_table2;

  std::deque<uint32_t> sig_history_1 = std::deque<uint32_t>(
      SigDistance.at(0)); // front is the newest, back is the oldest
  std::deque<uint32_t> sig_history_2 = std::deque<uint32_t>(
      SigDistance.at(1)); // front is the newest, back is the oldest

  WindowBasedStreamPrefetcher stream_prefetcher = {};

  UpperBitTable upper_bit_extracter = {};

  template <class T> void print_parameter(const std::string &str, T &param) {
    std::cout << str << ": " << param << std::endl;
  }

public:
  D_JOLT_PREFETCHER(O3_CPU *pO3_CPU);

  template <class Table>
  void prefetch_rdip(const Table &table, uint32_t rdip_sig);
  void branch_operate(uint64_t ip, uint8_t branch_type, uint64_t branch_target);
  void cache_operate(uint64_t addr, uint8_t cache_hit, uint8_t prefetch_hit);
  void cycle_operate();
  void final_stats();
  void cache_fill(uint64_t v_addr, uint32_t set, uint32_t way, uint8_t prefetch,
                  uint64_t evicted_v_addr);
};

D_JOLT_PREFETCHER::D_JOLT_PREFETCHER(O3_CPU *pO3_CPU) : pO3_CPU(pO3_CPU) {
  std::cout << "L1I D-JOLT instruction prefetcher has been constructed!"
            << std::endl;

  miss_table1.at(0) =
      SetAssociativeLRUTable<uint32_t,
                             MissTableEntry<ShortRangePrefetcher_N_Vectors,
                                            ShortRangePrefetcher_VectorSize>,
                             SigHasher>(MissTable1_N_Sets.at(0),
                                        MissTable1_N_Ways.at(0), SigHasher{});
  miss_table1.at(1) =
      SetAssociativeLRUTable<uint32_t,
                             MissTableEntry<ShortRangePrefetcher_N_Vectors,
                                            ShortRangePrefetcher_VectorSize>,
                             SigHasher>(MissTable1_N_Sets.at(1),
                                        MissTable1_N_Ways.at(1), SigHasher{});

  miss_table2 = SetAssociativeLRUTable<
      uint32_t,
      MissTableEntry<ExtraMissTable_N_Vectors, ExtraMissTable_VectorSize>,
      SigHasher>(ExtraMissTable_N_Sets, ExtraMissTable_N_Ways, SigHasher{});
}

template <class Table>
void D_JOLT_PREFETCHER::prefetch_rdip(const Table &table, uint32_t sig) {
  if (table.contains(sig)) {
    for (const auto &v : table[sig].getValidEntries()) {
      for (const auto &address : v.getAddresses()) {
        const uint64_t pf_addr = upper_bit_extracter.decompress(address);
        const int success = pO3_CPU->prefetch_code_line(pf_addr);
      }
    }
  }
}

void D_JOLT_PREFETCHER::branch_operate(uint64_t ip, uint8_t branch_type,
                                       uint64_t branch_target) {
  uint32_t sig_1;
  uint32_t sig_2;

  if (branch_type == BRANCH_DIRECT_CALL ||
      branch_type == BRANCH_INDIRECT_CALL) {
    sig_1 = siggen_1.onCallInstruction(ip, branch_target);
    sig_2 = siggen_2.onCallInstruction(ip, branch_target);
  } else if (branch_type == BRANCH_RETURN) {
    sig_1 = siggen_1.onReturnInstruction(ip, branch_target);
    sig_2 = siggen_2.onReturnInstruction(ip, branch_target);
  } else {
    return;
  }

  // Make sure storage limits are adhered to...
  // assert(sig_1 < (1ull<<ExtraMissTable_TagBits) * ExtraMissTable_N_Sets);
  // assert(sig_2 < (1ull<<ExtraMissTable_TagBits) * ExtraMissTable_N_Sets);
  // assert(sig_1 < (1ull<<ShortRangePrefetcher_TagBits) *
  // ShortRangePrefetcher_N_Sets); assert(sig_2 <
  // (1ull<<LongRangePrefetcher_TagBits) * LongRangePrefetcher_N_Sets);

  sig_history_1.pop_back();
  sig_history_1.push_front(sig_1);
  sig_history_2.pop_back();
  sig_history_2.push_front(sig_2);

  prefetch_rdip(miss_table1.at(0), sig_history_1.front());
  prefetch_rdip(miss_table2, sig_history_1.front());
  prefetch_rdip(miss_table1.at(1), sig_history_2.front());
  prefetch_rdip(miss_table2, sig_history_2.front());
}

void D_JOLT_PREFETCHER::cache_operate(uint64_t addr, uint8_t cache_hit,
                                      uint8_t prefetch_hit) {
  const bool miss = cache_hit == 0;
  const bool virtual_miss = cache_hit == 0 || prefetch_hit == 1;
  stream_prefetcher.cache_operate(addr, cache_hit, prefetch_hit, pO3_CPU);

  if (miss) {
    const auto compress_result = upper_bit_extracter.compress(addr);
    const bool compress_success = compress_result.first;
    const CompressedLineAddress c_addr = compress_result.second;

    if (!compress_success) {
      return;
    }

    for (size_t i = 0; i < N_Prefetchers; ++i) {
      const uint32_t sig = i == 0 ? sig_history_1.back() : sig_history_2.back();
      if (!miss_table1.at(i).contains(sig)) {
        miss_table1.at(i).insert(sig, {});
      } else {
        miss_table1.at(i).touch(sig);
      }

      const bool success =
          miss_table1.at(i)[sig].insert_but_do_not_evict(c_addr);
      if (!success) {
        if (!miss_table2.contains(sig)) {
          miss_table2.insert(sig, {});
        } else {
          miss_table2.touch(sig);
        }
        miss_table2[sig].insert_but_do_not_evict(c_addr);
      } else if (miss_table2.contains(sig)) {
        miss_table2.touch(sig);
      }
    }
  }
}

void D_JOLT_PREFETCHER::cycle_operate() {}

void D_JOLT_PREFETCHER::final_stats() {}

void D_JOLT_PREFETCHER::cache_fill(uint64_t v_addr, uint32_t set, uint32_t way,
                                   uint8_t prefetch, uint64_t evicted_v_addr) {}

std::array<std::unique_ptr<D_JOLT_PREFETCHER>, NUM_CPUS> l1i_prefetcher;

} // namespace

void O3_CPU::l1i_prefetcher_initialize() {
  ::l1i_prefetcher.at(cpu).reset(new ::D_JOLT_PREFETCHER(this));
}

void O3_CPU::l1i_prefetcher_branch_operate(uint64_t ip, uint8_t branch_type,
                                           uint64_t branch_target) {
  ::l1i_prefetcher.at(cpu)->branch_operate(ip, branch_type, branch_target);
}

void O3_CPU::l1i_prefetcher_cache_operate(uint64_t v_addr, uint8_t cache_hit,
                                          uint8_t prefetch_hit) {
  ::l1i_prefetcher.at(cpu)->cache_operate(v_addr, cache_hit, prefetch_hit);
}

void O3_CPU::l1i_prefetcher_cache_fill(uint64_t v_addr, uint32_t set,
                                       uint32_t way, uint8_t prefetch,
                                       uint64_t evicted_v_addr) {
  ::l1i_prefetcher.at(cpu)->cache_fill(v_addr, set, way, prefetch,
                                       evicted_v_addr);
}

void O3_CPU::l1i_prefetcher_cycle_operate() {
  ::l1i_prefetcher.at(cpu)->cycle_operate();
}

void O3_CPU::l1i_prefetcher_final_stats() {
  ::l1i_prefetcher.at(cpu)->final_stats();
}