#include "ooo_cpu.h"

#define TRIMODAL_TABLE_SIZE 16384
#define TRIMODAL_PRIME 16381
#define MAX_COUNTER 7
int trimodal_table[NUM_CPUS][TRIMODAL_TABLE_SIZE];

void O3_CPU::initialize_branch_predictor() {
  cout << "CPU " << cpu << " trimodal branch predictor" << endl;

  for (int i = 0; i < TRIMODAL_TABLE_SIZE; i++)
    trimodal_table[cpu][i] = 0;
}

uint8_t O3_CPU::predict_branch(uint64_t ip) {
  uint32_t hash = ip % TRIMODAL_PRIME;
  uint8_t prediction =
      (trimodal_table[cpu][hash] >= ((MAX_COUNTER + 1) / 2)) ? 1 : 0;

  return prediction;
}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken) {
  uint32_t hash = ip % TRIMODAL_PRIME;

  if (taken && (trimodal_table[cpu][hash] < MAX_COUNTER))
    trimodal_table[cpu][hash]++;
  else if ((taken == 0) && (trimodal_table[cpu][hash] > 0))
    trimodal_table[cpu][hash]--;
}
